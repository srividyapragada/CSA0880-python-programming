def find_peak_element(nums):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        # Check if mid is a peak
        if (mid == 0 or nums[mid] > nums[mid - 1]) and (mid == len(nums) - 1 or nums[mid] > nums[mid + 1]):
            return mid
        elif mid > 0 and nums[mid - 1] > nums[mid]:
            right = mid - 1
        else:
            left = mid + 1
    
    return -1  # In case of no peak (though as per problem it should not happen)

# Test cases
print(find_peak_element([1, 2, 3, 1]))        # Output: 2
print(find_peak_element([1, 2, 1, 3, 5, 6, 4]))  # Output: 5
print(find_peak_element([5, 10, 20, 15]))     # Output: 20
print(find_peak_element([1, 3, 2, 4, 1, 0]))  # Output: 4
print(find_peak_element([1, 1, 1, 3, 2, 1, 2]))  # Output: 3
