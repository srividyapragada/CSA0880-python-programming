def minDistance(word1, word2):
    m, n = len(word1), len(word2)
    
    # Create a DP table with (m+1) x (n+1)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Initialize base cases
    for i in range(1, m + 1):
        dp[i][0] = i
    for j in range(1, n + 1):
        dp[0][j] = j
    
    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i][j - 1],       # Insert
                               dp[i - 1][j],       # Delete
                               dp[i - 1][j - 1]) + 1  # Replace
    
    # Return the minimum operations to convert word1 to word2
    return dp[m][n]

# Test cases
print(minDistance("horse", "ros"))          # Output: 3
print(minDistance("intention", "execution"))# Output: 5
print(minDistance("sunday", "saturday"))    # Output: 3
