def maxProfit(prices):
    if not prices:
        return 0

    n = len(prices)
    # Initialize profit arrays
    left_profits = [0] * n
    right_profits = [0] * n

    # Calculate max profit from left to right
    min_price = prices[0]
    for i in range(1, n):
        left_profits[i] = max(left_profits[i-1], prices[i] - min_price)
        min_price = min(min_price, prices[i])

    # Calculate max profit from right to left
    max_price = prices[n-1]
    for i in range(n-2, -1, -1):
        right_profits[i] = max(right_profits[i+1], max_price - prices[i])
        max_price = max(max_price, prices[i])

    # Combine the profits to find the maximum profit
    max_profit = 0
    for i in range(n):
        max_profit = max(max_profit, left_profits[i] + right_profits[i])

    return max_profit

# Test cases
print(maxProfit([7, 1, 5, 3, 6, 4]))  # Output: 7
print(maxProfit([7, 6, 4, 3, 1]))     # Output: 0
print(maxProfit([10, 22, 5, 75, 65, 80]))  # Output: 87
print(maxProfit([2, 30, 15, 10, 8, 25, 80]))  # Output: 100
print(maxProfit([10, 22, 5, 75, 65, 80]))  # Output: 87
