from typing import List

def permute_unique(nums: List[int]) -> List[List[int]]:
    def backtrack(path, used):
        if len(path) == len(nums):
            result.append(path[:])
            return
        for i in range(len(nums)):
            if used[i]:
                continue
            if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:
                continue
            used[i] = True
            path.append(nums[i])
            backtrack(path, used)
            path.pop()
            used[i] = False
    
    nums.sort()
    result = []
    used = [False] * len(nums)
    backtrack([], used)
    return result

# Test cases
print(permute_unique([1, 1, 2]))       # Output: [[1, 1, 2], [1, 2, 1], [2, 1, 1]]
print(permute_unique([1, 2, 3]))       # Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
print(permute_unique([2, 8, 9, 10]))   # Output: all permutations of [2, 8, 9, 10]
print(permute_unique([-1, 0, 1]))      # Output: all permutations of [-1, 0, 1]
print(permute_unique([1, 1, 1]))       # Output: [[1, 1, 1]]
